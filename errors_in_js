Let’s dive deeper into all the potential errors that can occur when using fetch() in JavaScript, and 
explain why they happen, what they look like, and how to handle them.

🔴 1. Invalid URL / Network Error
❓ What is it?
When the URL you're requesting is not reachable or misspelled, the browser can't connect to the server.

🔥 Error Message:
TypeError: Failed to fetch
🧠 Why?
The domain doesn’t exist (e.g., https://api.example.com/data)

You're offline

Firewall or browser blocks the request

✅ Solution:
Make sure the URL is real and working.

Check your network.

Try with a valid public API:


fetch('https://jsonplaceholder.typicode.com/posts')
🔴 2. CORS Error (Cross-Origin Resource Sharing)
❓ What is it?
When a website tries to make a request to another domain (cross-origin), the server must explicitly allow it.

🔥 Error Message (in browser console):

Access to fetch at 'https://someapi.com' from origin 'http://yourdomain.com' has been blocked by CORS policy
🧠 Why?
The API server does not include CORS headers (like Access-Control-Allow-Origin)

The browser blocks the request for security

✅ Solution:
Use APIs that support CORS

If testing, use a CORS proxy like:


fetch('https://cors-anywhere.herokuapp.com/https://example.com/api')
Or, configure your own server to allow CORS

🔴 3. HTTP Status Errors (404, 500, etc.)
❓ What is it?
The server responds with an HTTP status code like 404 (Not Found) or 500 (Internal Server Error).

🔥 Problem:
fetch() does not treat these as errors. So .then() runs, even if the request failed.


fetch('https://jsonplaceholder.typicode.com/unknown')
  .then(res => res.json()) // ← this still runs!
🧠 Why?
fetch() only throws errors for network-level issues, not for HTTP status codes.

✅ Solution:
Manually check response.ok:


fetch('https://jsonplaceholder.typicode.com/unknown')
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return response.json();
  })
  .catch(error => console.error('Fetch failed:', error));
🔴 4. Invalid JSON Format
❓ What is it?
If the server responds with something that's not valid JSON, calling response.json() will throw an error.

🔥 Error Message:

SyntaxError: Unexpected token < in JSON at position 0
🧠 Why?
The server returned HTML (e.g., an error page)

Or returned plain text, XML, or broken JSON

✅ Solution:
Inspect the server’s response using response.text() first (for debugging)

Make sure the API returns Content-Type: application/json

Example:


fetch('https://example.com/api')
  .then(res => res.text()) // First inspect raw text
  .then(text => console.log(text));
🔴 5. JavaScript Logic Errors
❓ What is it?
Even if the fetch itself works, your code logic may fail — for example, if you assume data always has a certain shape.

🔥 Example:

.then(data => {
  console.log(data.name.toUpperCase()); // TypeError: Cannot read property 'toUpperCase' of undefined
});
🧠 Why?
The API response structure is different from what you expect

✅ Solution:
Always inspect and validate data before using it.


if (data && data.name) {
  console.log(data.name.toUpperCase());
}
🔴 6. Unhandled Promise Rejection (if .catch() is missing)
❓ What is it?
If you don’t use .catch() (or try/catch in async/await), the error will go uncaught.

🔥 Error Message:
In newer browsers:


Uncaught (in promise) TypeError: Failed to fetch
✅ Solution:
Always handle errors:


fetch(url)
  .then(...)
  .catch(err => console.error('Fetch failed:', err));
Or using async/await:


try {
  const response = await fetch(url);
  const data = await response.json();
} catch (err) {
  console.error('Error:', err);
}
