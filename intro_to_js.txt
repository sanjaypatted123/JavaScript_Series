complete javascript notes



‚úÖ 1. Hoisting in JavaScript
Definition:
Hoisting is JavaScript's default behavior of moving declarations (not initializations) 
to the top of the current scope (script or function).

ex:

console.log(x); // undefined
var x = 5;

greet();        // "Hello!"
function greet() {
  console.log("Hello!");
}

console.log(y); // ReferenceError: Cannot access 'y' before initialization
let y = 10;



‚úÖ 2. Execution Context in JavaScript
Definition:Execution Context is the environment in which JavaScript code is evaluated and executed.
There are three types:(generally two)
1. Global Execution Context (GEC) ‚Äì created when the file/script starts.
2. Function Execution Context (FEC) ‚Äì created each time a function is called.
3. Eval Execution Context ‚Äì for code inside eval() (not commonly used).

üîÅ Execution Phases:
Every execution context goes through two phases:
1Ô∏è‚É£ Creation Phase(memory)

* Hoisting happens here.
* A memory space is created for variables and functions.
* Variables declared with var are set to undefined.
* Functions are fully stored.
* let and const go into TDZ (Temporal Dead Zone).
2Ô∏è‚É£ Execution Phase(code)

* Code is executed line-by-line.
* Variables are assigned values.
* Functions are invoked.




Feature	                Hoisted	        Initialized	             Access Before Declaration
var	                    ‚úÖ	              undefined	              ‚úÖ (returns undefined)
let / const	            ‚úÖ	              ‚ùå (TDZ)	               ‚ùå (ReferenceError)
Function Decl.	        ‚úÖ	              ‚úÖ	                     ‚úÖ
Function Expr./Arrow	  ‚úÖ	              ‚ùå (as undefined)	     ‚ùå (TypeError if called)



üìå this in JavaScript
Definition:The this keyword refers to the object that is executing the current function.



Context |                       this Refers To
Global scope |                  Global object (window or global)
Regular function |              Global object (non-strict) or undefined
Object method |                 The object calling the method
Arrow function |                Lexical (parent) scope
Constructor function |          Newly created instance
call, apply, bind |             Explicitly defined object




--------------Shortest JavaScript Program-----------



The shortest valid JavaScript program is:


(Yes‚Äîan empty file.)

‚úÖ Why is it valid?
JavaScript doesn‚Äôt require a main() function or any specific entry point.

An empty script is still valid and runs without any syntax errors.

The JavaScript engine simply creates the Global Execution Context, does nothing, and exits cleanly.

üîç Explanation:
When this runs:

Global Execution Context is created.

No code ‚Üí no memory allocation or execution.

Program ends without error.




-------Loosely Typed Language in JavaScript----------


What does loosely typed mean?
JavaScript is a loosely typed or dynamically typed language.
This means variables are not bound to a specific data type when declared.

Example:
javascript
Copy
Edit
let x = 10;      // x is a number
x = "hello";     // now x is a string
x = true;        // now x is a boolean
A single variable can hold different types of values at different times.
JavaScript determines the type of the variable at runtime.

Key Points:
Variables can hold any data type.

You do not need to specify the type of variable while declaring it.

Type checking happens during program execution.

JavaScript uses automatic type conversion when needed.

Example of Type Coercion:
console.log("5" + 1); // Outputs "51" (string concatenation)
console.log("5" - 1); // Outputs 4   (number subtraction)


JavaScript converts data types automatically depending on the operation, 
which can sometimes lead to unexpected results.



------------undefined and not defined-------------


These two terms look similar but mean very different things in JavaScript.
1. Undefined
  -A variable is declared but not assigned any value.
  -JavaScript automatically assigns undefined to it.
  -It also happens if a function does not return anything.


2. Not Defined
  -A variable is used without being declared at all.
  -JavaScript throws a ReferenceError.

In short
Undefined means: Variable exists, but no value yet.
Not defined means: Variable was never declared.


--------scope chain in JS--------


What is Scope?
Scope in JavaScript refers to the accessibility of variables‚Äî
where they can be used or referenced in the code.

-There are mainly three types of scope:
  1.Global Scope

  2.Local/Function Scope

  3.Block Scope (introduced in ES6 with let and const)


What is the Scope Chain?
The scope chain is the mechanism JavaScript uses to look for variables.
When you try to access a variable, JavaScript looks:

In the current scope.
If not found, it moves to the outer scope.
This continues up the chain until the variable is found or the global scope is reached.
If not found even there, it throws a ReferenceError.
This chain of nested scopes is called the scope chain.

In JavaScript, "lexical" is often used in terms like:

          -Lexical Scope

          -Lexical Environment

          -Lexical Context

They all relate to how scope is determined based on where code is written, not where it is executed.

Lexical Scope:
Lexical scope means that the scope of a variable is determined by its location in the source code.

Lexical Environment:
A Lexical Environment is an internal JavaScript concept.
Each time a function runs, a Lexical Environment is created, which contains:

        Local memory (variables, functions declared inside it)

        A reference to the outer Lexical Environment (where it was defined)
Keyword | Hoisted | Initialized at compile time? | Access before declaration
var | Yes | Yes (initialized with undefined) | Allowed (returns undefined)
let | Yes | No | Not allowed (TDZ error)
const | Yes | No | Not allowed (TDZ error)



--------hoisting in let and const keys------



Keyword | Hoisted |   Initialized at compile time? | Access before declaration
var |     Yes |       Yes (initialized with undefined) | Allowed (returns undefined)
let |     Yes |       No | Not allowed (TDZ error)
const |   Yes |       No | Not allowed (TDZ error)



let and const are hoisted but not initialized.

This creates a Temporal Dead Zone, where the variable exists but cannot be used.

Accessing the variable inside the TDZ throws a ReferenceError.

Always declare variables before using them to avoid TDZ issues.



>>>>>>>>>>>>>>      19th April'25      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

-----------types of errors---------



1. Syntax Error
Occurs when the JavaScript code has incorrect syntax.
more declarations for same variable
Example:
if (x > 5 console.log("Hello"));
Here, the missing parenthesis causes a syntax error.

2. Reference Error
Happens when trying to access a variable that hasn‚Äôt been declared.
not defined
Example:
console.log(myVar);
If myVar is not declared anywhere, it throws a reference error.

3. Type Error
Occurs when a value is used in an inappropriate way.
ex: after const keyword is used and declared with other value
Example:
null.toString();
You can‚Äôt call a method on null, so this will cause a type error.



--------------closures-------------



A closure is formed when a function remembers and has access 
to variables from its outer (lexical) scope, even after the outer 
function has finished executing.

A closure is the combination of a function bundled together (enclosed) with 
references to its surrounding state (the lexical environment). 
In other words, a closure gives a function access to its outer scope. 
In JavaScript, closures are created every time a function is created, at function creation time.


Where are Closures Used?
Data hiding and encapsulation

Creating private variables

Callback functions

Functional programming

Event handling



Closures ‚Äì Real-World Analogy
üéí Analogy: A Backpack After Leaving School
Imagine this:

You're in a classroom (function scope).

You pack your backpack with some notes and snacks (variables).

The school day ends (outer function ends), and you go home.

But your backpack still contains the notes and snacks you packed.

üëâ That backpack is like a closure.

Even though the school (function) is closed, you still have access to the things you packed (variables). The inner function remembers the environment it was created in ‚Äî just like you remember what was in your backpack.


Closures (with technical terms)
A closure is created when:

A function is defined inside another function, and

The inner function accesses variables from the outer (enclosing) function‚Äôs lexical environment (scope),

And the outer function has already finished executing.

‚û§ How It Works Technically:
When a function is defined, it forms a lexical scope chain.

If an inner function references variables from its outer scope, those variables are retained in memory,
even if the outer function has completed execution.

This retained environment is called a closure.


--------------Garbage Collection-----------


Garbage Collection in JavaScript
‚û§ What is Garbage Collection?
Garbage collection is the process of automatically freeing memory that is no 
longer used, so your program doesn‚Äôt run out of memory.

JavaScript handles memory management for you via a built-in garbage collector.


How Does it Work?
Most modern JavaScript engines use a method called mark-and-sweep.

üîÅ Mark-and-Sweep Algorithm (Simple Explanation):
The garbage collector starts from a set of root objects (like window, global variables).

It marks all the variables reachable from the root.

Any variable not marked is considered unreachable and removed from memory.

When is Memory Freed?
Memory is freed when:

Objects/variables are no longer referenced.

Closures and event listeners are cleaned up properly.

The function where a variable was declared finishes executing and it's not being referenced elsewhere.

‚û§ Common Causes of Memory Leaks (when GC can't clean memory):
Global variables that are never cleared

Closures that hold on to large variables unnecessarily

Unremoved event listeners

Detached DOM elements still referenced in JS


Garbage Collection ‚Äì Real-World Analogy
üßπ Analogy: House Cleaner Removing Unused Stuff
Imagine a house where:

Every item is being used by someone (referenced).

The cleaner (garbage collector) walks around occasionally.

If they find an old box in the corner that no one uses or remembers, they throw it away (free memory).

üëâ If you're still using that item or someone else is referencing 
it (like global variables or closures still holding it), the cleaner won‚Äôt remove it.


Garbage Collection (with technical terms)
JavaScript uses automatic memory management, and its garbage collection is usually based on the mark-and-sweep algorithm.

‚û§ How Mark-and-Sweep Works:
The garbage collector starts at root objects, like window in browsers or the global object in Node.js.

It marks all reachable objects ‚Äî that is, objects that are still accessible via variables, closures, or references.

Any object that is not reachable (i.e., has no reference from any accessible variable or closure) is considered garbage and is eligible to be freed from memory.

‚û§ Common Memory Leak Scenarios:
Global variables that are never cleared

Closures that retain unnecessary references to large objects

Uncleared timers or intervals (setInterval, setTimeout)

Event listeners not removed after DOM elements are deleted




------closure and garbage connection-----------



Connection Between Closures & Garbage Collection:
Closures can prevent garbage collection if they retain references to variables or large data unnecessarily.

This is because as long as a closure exists and is reachable, the variables it closes over remain in memory.







-----------block scope and shadowing------------


üîπ Block Scope
Definition:
Block scope means that variables declared inside a block { } 
using let or const are only accessible within that block.


üîπ Shadowing
Definition:Shadowing happens when a variable declared inside a 
block has the same name as a variable in an outer scope. 
The inner variable "shadows" the outer one within the block.


Important Notes:
Shadowing is allowed with let, const, and var, 
but be careful as it may lead to confusion.

Mixing var and let/const for the same variable name can 
cause unexpected behavior.


